precision mediump float;

varying vec3 fragVertice;
varying vec3 fragNormale;
varying vec3 fragPosLum;
varying vec3 fragPosEye;

uniform vec3 ambiant;
uniform vec3 diffuse;
uniform vec3 specular;
uniform float brillance;


vec3 phong()
{
  vec3 N = normalize(fragNormale);
  vec3 lumDir = normalize(fragPosLum - fragVertice);
  float angle = max(dot(lumDir, N), 0.0);

  vec3 reflection = reflect(-lumDir, N);
  vec3 eyeDir = normalize(fragPosEye);
  float spec = pow(max(dot(reflection, eyeDir), 0.0), brillance);
 
	vec3 phong;
	phong = ambiant;
	phong += (diffuse * angle);
	phong += (specular * spec);
  return phong; 
}



void main()
{
  gl_FragColor = vec4(phong(), 1.0);
  //gl_FragColor = vec4(fragNormale, 1.0);
  //gl_FragColor = vec4(fragPosEye, 1.0);
}



